<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>administration on Welcome to Dan&#39;s Blog Site</title>
    <link>https://dtrac.github.io/categories/administration/</link>
    <description>Recent content in administration on Welcome to Dan&#39;s Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Sep 2023 15:09:26 +0100</lastBuildDate><atom:link href="https://dtrac.github.io/categories/administration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>terraform data types</title>
      <link>https://dtrac.github.io/posts/terraform-data-types/</link>
      <pubDate>Sun, 10 Sep 2023 15:09:26 +0100</pubDate>
      
      <guid>https://dtrac.github.io/posts/terraform-data-types/</guid>
      <description>Brewing Success: Deploying Terraform&amp;rsquo;s Data Types for the Cloud Café in Azure Link to heading Introduction: Welcome to the grand opening of the Cloud Café, where the aroma of freshly brewed coffee masks the stench of poorly deployed Azure infrastructure. Today, we&amp;rsquo;re not just serving up skinny, double-vented caramel mocha-lattes; we&amp;rsquo;re crafting the infrastructure in the Cloud Cafe global datacenter using some of Terraform&amp;rsquo;s complex data types — lists, sets, and maps.</description>
    </item>
    
    <item>
      <title>resource graph gotchas</title>
      <link>https://dtrac.github.io/posts/resource-graph-gotchas/</link>
      <pubDate>Thu, 30 Mar 2023 19:00:05 +0000</pubDate>
      
      <guid>https://dtrac.github.io/posts/resource-graph-gotchas/</guid>
      <description>Following on from my previous post on the benefits of Azure Resource Graph, I thought I should try and provide a bit of balance by highlighting a couple of things to consider.
So, a minor gripe to start with&amp;hellip;there can be a lag between the time a resource is created (or updated), and when this change is reflected in Azure Resource Graph. The reason for this delay is in the event-driven backed, wherein the Azure Resource Manager provider responsible for making the change has to notify Resource Graph, which then has to update it&amp;rsquo;s database - which can lead to a short delay (I&amp;rsquo;ve seen 15-60min delays at times&amp;hellip;).</description>
    </item>
    
    <item>
      <title>resource graph queries with powershell (two ways!)</title>
      <link>https://dtrac.github.io/posts/resource-graph-queries/</link>
      <pubDate>Wed, 08 Mar 2023 18:50:05 +0000</pubDate>
      
      <guid>https://dtrac.github.io/posts/resource-graph-queries/</guid>
      <description>Whilst looking at some intermittent Azure DevOps pipeline failures recently, a colleague of mine realized that we were being throttled by various Azure APIs, mainly due to how inefficiently our PowerShell scripts were written.
You know the score, you need to enumerate a particular property from all of the storage accounts deployed within your tenant, so you end up quickly doing something along the lines of:
foreach ($subscription in Get-AzSubscription) { &amp;lt;# $subscription is the current item #&amp;gt; foreach ($storageAccount in Get-AzStorageAccount) { &amp;lt;# $storageAccount is the current item #&amp;gt; $storageAccount.</description>
    </item>
    
  </channel>
</rss>
